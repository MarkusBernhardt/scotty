package de.scmb.scotty.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReconciliationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReconciliationAllPropertiesEquals(Reconciliation expected, Reconciliation actual) {
        assertReconciliationAutoGeneratedPropertiesEquals(expected, actual);
        assertReconciliationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReconciliationAllUpdatablePropertiesEquals(Reconciliation expected, Reconciliation actual) {
        assertReconciliationUpdatableFieldsEquals(expected, actual);
        assertReconciliationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReconciliationAutoGeneratedPropertiesEquals(Reconciliation expected, Reconciliation actual) {
        assertThat(expected)
            .as("Verify Reconciliation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReconciliationUpdatableFieldsEquals(Reconciliation expected, Reconciliation actual) {
        assertThat(expected)
            .as("Verify Reconciliation relevant properties")
            .satisfies(e -> assertThat(e.getMandateId()).as("check mandateId").isEqualTo(actual.getMandateId()))
            .satisfies(e -> assertThat(e.getPaymentId()).as("check paymentId").isEqualTo(actual.getPaymentId()))
            .satisfies(e -> assertThat(e.getGateway()).as("check gateway").isEqualTo(actual.getGateway()))
            .satisfies(e -> assertThat(e.getIban()).as("check iban").isEqualTo(actual.getIban()))
            .satisfies(e -> assertThat(e.getBic()).as("check bic").isEqualTo(actual.getBic()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCurrencyCode()).as("check currencyCode").isEqualTo(actual.getCurrencyCode()))
            .satisfies(e -> assertThat(e.getSoftDescriptor()).as("check softDescriptor").isEqualTo(actual.getSoftDescriptor()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getStreetName()).as("check streetName").isEqualTo(actual.getStreetName()))
            .satisfies(e -> assertThat(e.getHouseNumber()).as("check houseNumber").isEqualTo(actual.getHouseNumber()))
            .satisfies(e -> assertThat(e.getPostalCode()).as("check postalCode").isEqualTo(actual.getPostalCode()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getCountryCode()).as("check countryCode").isEqualTo(actual.getCountryCode()))
            .satisfies(e -> assertThat(e.getRemoteIp()).as("check remoteIp").isEqualTo(actual.getRemoteIp()))
            .satisfies(e -> assertThat(e.getEmailAddress()).as("check emailAddress").isEqualTo(actual.getEmailAddress()))
            .satisfies(e -> assertThat(e.getTimestamp()).as("check timestamp").isEqualTo(actual.getTimestamp()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getReasonCode()).as("check reasonCode").isEqualTo(actual.getReasonCode()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getGatewayId()).as("check gatewayId").isEqualTo(actual.getGatewayId()))
            .satisfies(e -> assertThat(e.getMode()).as("check mode").isEqualTo(actual.getMode()))
            .satisfies(e -> assertThat(e.getFileName()).as("check fileName").isEqualTo(actual.getFileName()))
            .satisfies(e -> assertThat(e.getCreditorName()).as("check creditorName").isEqualTo(actual.getCreditorName()))
            .satisfies(e -> assertThat(e.getCreditorIban()).as("check creditorIban").isEqualTo(actual.getCreditorIban()))
            .satisfies(e -> assertThat(e.getCreditorBic()).as("check creditorBic").isEqualTo(actual.getCreditorBic()))
            .satisfies(e -> assertThat(e.getCreditorId()).as("check creditorId").isEqualTo(actual.getCreditorId()))
            .satisfies(e -> assertThat(e.getMandateDate()).as("check mandateDate").isEqualTo(actual.getMandateDate()))
            .satisfies(e -> assertThat(e.getExecutionDate()).as("check executionDate").isEqualTo(actual.getExecutionDate()))
            .satisfies(e ->
                assertThat(e.getPaymentInformationId()).as("check paymentInformationId").isEqualTo(actual.getPaymentInformationId())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReconciliationUpdatableRelationshipsEquals(Reconciliation expected, Reconciliation actual) {
        assertThat(expected)
            .as("Verify Reconciliation relationships")
            .satisfies(e -> assertThat(e.getScottyPayment()).as("check scottyPayment").isEqualTo(actual.getScottyPayment()));
    }
}
